

// Variables
// ========================================================================

@panel-scrollable-height:                       170px;
@panel-scrollable-padding:                      10px;
@panel-scrollable-border-width:                 @global-border-width;
@panel-scrollable-border:                       @global-border;

@border-rounded-border-radius:                  5px;

@box-shadow-duration:                           0.1s;

@box-shadow-bottom-height:                      30px;
@box-shadow-bottom-border-radius:               100%;
@box-shadow-bottom-background:                  #444;
@box-shadow-bottom-blur:                        20px;

@dropcap-margin-right:                          10px;
@dropcap-font-size:                             ((@global-line-height * 3) * 1em);

@logo-font-size:                                @global-large-font-size;
@logo-font-family:                              @global-font-family;
@logo-color:                                    @global-color;
@logo-hover-color:                              @global-color;

@dragover-box-shadow:                           0 0 20px rgba(100,100,100,0.3);


/* ========================================================================
   Component: Utility
 ========================================================================== */



/* Clearfix
 ========================================================================== */

/*
 * 1. `table-cell` is used with `::before` because `table` creates a 1px gap when it becomes a flex item, only in Webkit
 * 2. `table` is used again with `::after` because `clear` only works with block elements.
 * Note: `display: block` with `overflow: hidden` is currently not working in the latest Safari
 */
.wx-button-reset{

  background: none ;
  color: inherit;
  font-size: inherit;
  line-height: inherit;
}
.wx-button-reset::after{ border: none; }


/* 1 */
.clearfix::before {
  content: "";
  display: table-cell;
}

/* 2 */
.clearfix::after {
  content: "";
  display: table;
  clear: both;
}


/* Float
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.float-left { float: left; }
.float-right { float: right; }

/* 1 */
[class*='float-'] { max-width: 100%; }


/* Overfow
 ========================================================================== */

.overflow-hidden { overflow: hidden; }

/*
 * Enable scrollbars if content is clipped
 * Note: Firefox ignores `padding-bottom` for the scrollable overflow https://bugzilla.mozilla.org/show_bug.cgi?id=748518
 */




/* Resize
 ========================================================================== */

.resize { resize: both; }
.resize-vertical { resize: vertical; }


/* Display
 ========================================================================== */

.display-block { display: block !important; }
.display-inline { display: inline !important; }
.display-inline-block { display: inline-block !important; }


/* Inline
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Create position context
 * 3. Prevent content overflow
 * 4. Behave like most inline-block elements
 * 5. Force hardware acceleration without creating a new stacking context
 *    to fix 1px glitch when combined with overlays and transitions in Webkit
 * 6. Clip child elements
 */

[class*='inline'] {
  /* 1 */
  display: inline-block;
  /* 2 */
  position: relative;
  /* 3 */
  max-width: 100%;
  /* 4 */
  vertical-align: middle;
  /* 5 */
  -webkit-backface-visibility: hidden;
}

.inline-clip {
  /* 6 */
  overflow: hidden;
}


/* Responsive objects
 ========================================================================== */

/*
 * Preserve original dimensions
 * Because `img, `video`, `canvas` and  `audio` are already responsive by default, see Base component
 */

.preserve-width,
.preserve-width audio,
.preserve-width canvas,
.preserve-width img,
.preserve-width svg,
.preserve-width video { max-width: none; }

/*
 * Responsiveness
 * Corrects `max-width` and `max-height` behavior if padding and border are used
 */

.responsive-width,
.responsive-height { box-sizing: border-box; }

/*
 * 1. Set a maximum width. `important` needed to override `preserve-width img`
 * 2. Auto scale the height. Only needed if `height` attribute is present
 */

.responsive-width {
  /* 1 */
  max-width: 100% !important;
  /* 2 */
  height: auto;
}

/*
 * 1. Set a maximum height. Only works if the parent element has a fixed height
 * 2. Auto scale the width. Only needed if `width` attribute is present
 * 3. Reset max-width, which `img, `video`, `canvas` and  `audio` already have by default
 */

.responsive-height {
  /* 1 */
  max-height: 100%;
  /* 2 */
  width: auto;
  /* 3 */
  max-width: none;
}


/* Border
 ========================================================================== */

.border-circle { border-radius: 50%; }
.border-rounded { border-radius: @border-rounded-border-radius; }

/*
 * Fix `overflow: hidden` to be ignored with border-radius and CSS transforms in Webkit
 */

.inline-clip[class*='border-'] { -webkit-transform: translateZ(0); }


/* Box-shadow
 ========================================================================== */

.box-shadow-small { box-shadow: @global-small-box-shadow; }
.box-shadow-medium { box-shadow: @global-medium-box-shadow; }
.box-shadow-large { box-shadow: @global-large-box-shadow; }
.box-shadow-xlarge { box-shadow: @global-xlarge-box-shadow; }

/*
 * Hover
 */

[class*='box-shadow-hover'] { transition: box-shadow @box-shadow-duration ease-in-out; }

.box-shadow-hover-small:hover { box-shadow: @global-small-box-shadow; }
.box-shadow-hover-medium:hover { box-shadow: @global-medium-box-shadow; }
.box-shadow-hover-large:hover { box-shadow: @global-large-box-shadow; }
.box-shadow-hover-xlarge:hover { box-shadow: @global-xlarge-box-shadow; }


/* Box-shadow bottom
 ========================================================================== */

/*
 * 1. Set position.
 * 2. Set style
 * 3. Blur doesn't work on pseudo elements with negative `z-index` in Edge.
 *    Solved by using `before` and add position context to child elements.
 */


/* Drop cap
 ========================================================================== */

/*
 * 1. Firefox doesn't apply `::first-letter` if the first letter is inside child elements
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=214004
 * 2. In Firefox, a floating `::first-letter` doesn't have a line box and there for no `line-height`
 *    https://bugzilla.mozilla.org/show_bug.cgi?id=317933
 * 3. Caused by 1.: Edge creates two nested `::first-letter` containers, one for each selector
 *    This doubles the `font-size` exponential when using the `em` unit.
 */

.dropcap::first-letter,
  /* 1 */




/* Logo
 ========================================================================== */

/*
 * 1. Required for `a`
 */

.logo {
  font-size: @logo-font-size;
  font-family: @logo-font-family;
  color: @logo-color;
  /* 1 */
  text-decoration: none;

}
/* Hover + Focus */
.logo:hover,
.logo:focus {
  color: @logo-hover-color;
  outline: none;
  /* 1 */
  text-decoration: none;

}

.logo-inverse { display: none; }


/* Disabled State
 ========================================================================== */

.disabled { pointer-events: none; }


/* Drag State
 ========================================================================== */

/*
 * 1. Needed if moving over elements with have their own cursor on hover, e.g. links or buttons
 * 2. Fix dragging over iframes
 */


/* Dragover State
 ========================================================================== */

/*
 * Create a box-shadow when dragging a file over the upload area
 */

.dragover { box-shadow: @dragover-box-shadow; }


/* Blend modes
 ========================================================================== */

.blend-multiply { mix-blend-mode: multiply; }
.blend-screen { mix-blend-mode: screen; }
.blend-overlay { mix-blend-mode: overlay; }
.blend-darken { mix-blend-mode: darken; }
.blend-lighten { mix-blend-mode: lighten; }
.blend-color-dodge { mix-blend-mode: color-dodge; }
.blend-color-burn { mix-blend-mode: color-burn; }
.blend-hard-light { mix-blend-mode: hard-light; }
.blend-soft-light { mix-blend-mode: soft-light; }
.blend-difference { mix-blend-mode: difference; }
.blend-exclusion { mix-blend-mode: exclusion; }
.blend-hue { mix-blend-mode: hue; }
.blend-saturation { mix-blend-mode: saturation; }
.blend-color { mix-blend-mode: color; }
.blend-luminosity { mix-blend-mode: luminosity; }


/* Transform
========================================================================== */

.transform-center { transform: translate(-50%, -50%); }


/* Transform Origin
========================================================================== */

.transform-origin-top-left { transform-origin: 0 0; }
.transform-origin-top-center { transform-origin: 50% 0; }
.transform-origin-top-right { transform-origin: 100% 0; }
.transform-origin-center-left { transform-origin: 0 50%; }
.transform-origin-center-right { transform-origin: 100% 50%; }
.transform-origin-bottom-left { transform-origin: 0 100%; }
.transform-origin-bottom-center { transform-origin: 50% 100%; }
.transform-origin-bottom-right { transform-origin: 100% 100%; }



