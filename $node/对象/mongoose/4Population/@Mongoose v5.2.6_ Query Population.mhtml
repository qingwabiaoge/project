From: <Saved by Blink>
Snapshot-Content-Location: http://mongoosejs.com/docs/populate.html#deep-populate
Subject: Mongoose v5.2.6: Query Population
Date: Sat, 4 Aug 2018 09:38:27 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----"


------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: text/html
Content-ID: <frame-00160DC62242501F88C60C10D35E4041@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://mongoosejs.com/docs/populate.html#deep-populate

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8"><meta name=3D"viewport" content=3D"wid=
th=3Ddevice-width, initial-scale=3D1.0, maximum-scale=3D1.0, user-scalable=
=3Dno"><title>Mongoose v5.2.6: Query Population</title><link rel=3D"apple-t=
ouch-icon" sizes=3D"57x57" href=3D"http://mongoosejs.com/docs/images/favico=
n/apple-icon-57x57.png"><link rel=3D"apple-touch-icon" sizes=3D"60x60" href=
=3D"http://mongoosejs.com/docs/images/favicon/apple-icon-60x60.png"><link r=
el=3D"apple-touch-icon" sizes=3D"72x72" href=3D"http://mongoosejs.com/docs/=
images/favicon/apple-icon-72x72.png"><link rel=3D"apple-touch-icon" sizes=
=3D"76x76" href=3D"http://mongoosejs.com/docs/images/favicon/apple-icon-76x=
76.png"><link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"http://mon=
goosejs.com/docs/images/favicon/apple-icon-114x114.png"><link rel=3D"apple-=
touch-icon" sizes=3D"120x120" href=3D"http://mongoosejs.com/docs/images/fav=
icon/apple-icon-120x120.png"><link rel=3D"apple-touch-icon" sizes=3D"144x14=
4" href=3D"http://mongoosejs.com/docs/images/favicon/apple-icon-144x144.png=
"><link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"http://mongoosej=
s.com/docs/images/favicon/apple-icon-152x152.png"><link rel=3D"apple-touch-=
icon" sizes=3D"180x180" href=3D"http://mongoosejs.com/docs/images/favicon/a=
pple-icon-180x180.png"><link rel=3D"icon" type=3D"image/png" sizes=3D"192x1=
92" href=3D"http://mongoosejs.com/docs/images/favicon/android-icon-192x192.=
png"><link rel=3D"icon" type=3D"image/png" sizes=3D"32x32" href=3D"http://m=
ongoosejs.com/docs/images/favicon/favicon-32x32.png"><link rel=3D"icon" typ=
e=3D"image/png" sizes=3D"96x96" href=3D"http://mongoosejs.com/docs/images/f=
avicon/favicon-96x96.png"><link rel=3D"icon" type=3D"image/png" sizes=3D"16=
x16" href=3D"http://mongoosejs.com/docs/images/favicon/favicon-16x16.png"><=
link rel=3D"stylesheet" href=3D"https://unpkg.com/purecss@1.0.0/build/pure-=
min.css" integrity=3D"sha384-nn4HPE8lTHyVtfCBi5yW9d20FjT8BJwUXyWZT9InLYax14=
RDjBj46LmSztkmNP9w" crossorigin=3D"anonymous"><link rel=3D"stylesheet" href=
=3D"https://fonts.googleapis.com/css?family=3DOpen+Sans"><link rel=3D"style=
sheet" href=3D"http://mongoosejs.com/docs/css/github.css"><link rel=3D"styl=
esheet" href=3D"http://mongoosejs.com/docs/css/mongoose5.css"><link rel=3D"=
apple-touch-icon" sizes=3D"57x57" href=3D"http://mongoosejs.com/docs/images=
/favicon/apple-icon-57x57.png"><link rel=3D"apple-touch-icon" sizes=3D"60x6=
0" href=3D"http://mongoosejs.com/docs/images/favicon/apple-icon-60x60.png">=
<link rel=3D"apple-touch-icon" sizes=3D"72x72" href=3D"http://mongoosejs.co=
m/docs/images/favicon/apple-icon-72x72.png"><link rel=3D"apple-touch-icon" =
sizes=3D"76x76" href=3D"http://mongoosejs.com/docs/images/favicon/apple-ico=
n-76x76.png"><link rel=3D"apple-touch-icon" sizes=3D"114x114" href=3D"http:=
//mongoosejs.com/docs/images/favicon/apple-icon-114x114.png"><link rel=3D"a=
pple-touch-icon" sizes=3D"120x120" href=3D"http://mongoosejs.com/docs/image=
s/favicon/apple-icon-120x120.png"><link rel=3D"apple-touch-icon" sizes=3D"1=
44x144" href=3D"http://mongoosejs.com/docs/images/favicon/apple-icon-144x14=
4.png"><link rel=3D"apple-touch-icon" sizes=3D"152x152" href=3D"http://mong=
oosejs.com/docs/images/favicon/apple-icon-152x152.png"><link rel=3D"apple-t=
ouch-icon" sizes=3D"180x180" href=3D"http://mongoosejs.com/docs/images/favi=
con/apple-icon-180x180.png"><link rel=3D"icon" type=3D"image/png" sizes=3D"=
192x192" href=3D"http://mongoosejs.com/docs/images/favicon/android-icon-192=
x192.png"><link rel=3D"icon" type=3D"image/png" sizes=3D"32x32" href=3D"htt=
p://mongoosejs.com/docs/images/favicon/favicon-32x32.png"><link rel=3D"icon=
" type=3D"image/png" sizes=3D"96x96" href=3D"http://mongoosejs.com/docs/ima=
ges/favicon/favicon-96x96.png"><link rel=3D"icon" type=3D"image/png" sizes=
=3D"16x16" href=3D"http://mongoosejs.com/docs/images/favicon/favicon-16x16.=
png"><link rel=3D"manifest" href=3D"http://mongoosejs.com/docs/images/favic=
on/manifest.json"><meta name=3D"msapplication-TileColor" content=3D"#ffffff=
"><meta name=3D"msapplication-TileImage" content=3D"images/favicon/ms-icon-=
144x144.png"><meta name=3D"theme-color" content=3D"#ffffff"></head><body><d=
iv id=3D"layout"><div id=3D"mobile-menu"><a id=3D"menuLink" href=3D"http://=
mongoosejs.com/docs/populate.html#menu" class=3D"menu-link"><span></span></=
a><div id=3D"mobile-logo-container"><a href=3D"http://mongoosejs.com/"><img=
 id=3D"logo" src=3D"http://mongoosejs.com/docs/images/mongoose5_62x30_trans=
parent.png"><span class=3D"logo-text">mongoose</span></a></div></div><div i=
d=3D"menu"><div class=3D"pure-menu"><div id=3D"logo-container" class=3D"pur=
e-menu-heading"><a href=3D"http://mongoosejs.com/"><img id=3D"logo" src=3D"=
http://mongoosejs.com/docs/images/mongoose5_62x30_transparent.png"><span cl=
ass=3D"logo-text">mongoose</span></a></div><ul class=3D"pure-menu-list"><li=
 class=3D"pure-menu-horizontal pure-menu-item pure-menu-has-children pure-m=
enu-allow-hover version"><a href=3D"http://mongoosejs.com/docs/populate.htm=
l#" class=3D"pure-menu-link">Version 5.2.6</a><ul class=3D"pure-menu-childr=
en"><li class=3D"pure-menu-item"><a href=3D"http://mongoosejs.com/docs/4.x"=
 class=3D"pure-menu-link">Version 4.13.14</a></li><li class=3D"pure-menu-it=
em"><a href=3D"http://mongoosejs.com/docs/3.8.x" class=3D"pure-menu-link">V=
ersion 3.8.40</a></li></ul></li><li class=3D"pure-menu-item"><a href=3D"htt=
p://mongoosejs.com/docs/index.html" class=3D"pure-menu-link">Quick Start</a=
></li><li class=3D"pure-menu-item"><a href=3D"http://mongoosejs.com/docs/gu=
ides.html" class=3D"pure-menu-link">Guides</a></li><li class=3D"pure-menu-i=
tem sub-item"><a href=3D"http://mongoosejs.com/docs/guide.html" class=3D"pu=
re-menu-link">Schemas</a></li><li class=3D"pure-menu-item sub-item"><a href=
=3D"http://mongoosejs.com/docs/schematypes.html" class=3D"pure-menu-link">S=
chemaTypes</a></li><li class=3D"pure-menu-item sub-item"><a href=3D"http://=
mongoosejs.com/docs/connections.html" class=3D"pure-menu-link">Connections<=
/a></li><li class=3D"pure-menu-item sub-item"><a href=3D"http://mongoosejs.=
com/docs/models.html" class=3D"pure-menu-link">Models</a></li><li class=3D"=
pure-menu-item sub-item"><a href=3D"http://mongoosejs.com/docs/documents.ht=
ml" class=3D"pure-menu-link">Documents</a></li><li class=3D"pure-menu-item =
sub-item"><a href=3D"http://mongoosejs.com/docs/subdocs.html" class=3D"pure=
-menu-link">Subdocuments</a></li><li class=3D"pure-menu-item sub-item"><a h=
ref=3D"http://mongoosejs.com/docs/queries.html" class=3D"pure-menu-link">Qu=
eries</a></li><li class=3D"pure-menu-item sub-item"><a href=3D"http://mongo=
osejs.com/docs/validation.html" class=3D"pure-menu-link">Validation</a></li=
><li class=3D"pure-menu-item sub-item"><a href=3D"http://mongoosejs.com/doc=
s/middleware.html" class=3D"pure-menu-link">Middleware</a></li><li class=3D=
"pure-menu-item sub-item"><a href=3D"http://mongoosejs.com/docs/populate.ht=
ml" class=3D"pure-menu-link">Populate</a></li><li class=3D"pure-menu-item s=
ub-item"><a href=3D"http://mongoosejs.com/docs/discriminators.html" class=
=3D"pure-menu-link">Discriminators</a></li><li class=3D"pure-menu-item sub-=
item"><a href=3D"http://mongoosejs.com/docs/plugins.html" class=3D"pure-men=
u-link">Plugins</a></li><li class=3D"pure-menu-item"><a href=3D"http://mong=
oosejs.com/docs/api.html" class=3D"pure-menu-link">API</a></li><li class=3D=
"pure-menu-item sub-item"><a href=3D"http://mongoosejs.com/docs/api.html#mo=
ngoose_Mongoose" class=3D"pure-menu-link">Mongoose</a></li><li class=3D"pur=
e-menu-item sub-item"><a href=3D"http://mongoosejs.com/docs/api.html#Schema=
" class=3D"pure-menu-link">Schema</a></li><li class=3D"pure-menu-item sub-i=
tem"><a href=3D"http://mongoosejs.com/docs/api.html#Connection" class=3D"pu=
re-menu-link">Connection</a></li><li class=3D"pure-menu-item sub-item"><a h=
ref=3D"http://mongoosejs.com/docs/api.html#Document" class=3D"pure-menu-lin=
k">Document</a></li><li class=3D"pure-menu-item sub-item"><a href=3D"http:/=
/mongoosejs.com/docs/api.html#Model" class=3D"pure-menu-link">Model</a></li=
><li class=3D"pure-menu-item sub-item"><a href=3D"http://mongoosejs.com/doc=
s/api.html#Query" class=3D"pure-menu-link">Query</a></li><li class=3D"pure-=
menu-item sub-item"><a href=3D"http://mongoosejs.com/docs/api.html#Aggregat=
e" class=3D"pure-menu-link">Aggregate</a></li><li class=3D"pure-menu-item s=
ub-item"><a href=3D"http://mongoosejs.com/docs/api.html#Schematype" class=
=3D"pure-menu-link">SchemaType</a></li><li class=3D"pure-menu-item sub-item=
"><a href=3D"http://mongoosejs.com/docs/api.html#Virtualtype" class=3D"pure=
-menu-link">VirtualType</a></li><li class=3D"pure-menu-item"><a href=3D"htt=
p://mongoosejs.com/docs/compatibility.html" class=3D"pure-menu-link">Versio=
n Compatibility</a></li><li class=3D"pure-menu-item"><a href=3D"http://mong=
oosejs.com/docs/faq.html" class=3D"pure-menu-link">FAQ</a></li><div id=3D"c=
arbonads"><span><span class=3D"carbon-wrap"><a href=3D"http://srv.carbonads=
.net/ads/click/x/GTND42QICK7IPKQWF6YLYKQMCK7ICK3JCKYICZ3JCW7IC2QIF67DC23KC6=
BICK7ICA7I6K3EHJNCLSIZ?segment=3Dplacement:mongoosejscom;" class=3D"carbon-=
img" target=3D"_blank" rel=3D"noopener"><img src=3D"https://cdn4.buysellads=
.net/uu/1/3386/1525189887-61450.png" alt=3D"" border=3D"0" height=3D"100" w=
idth=3D"130" style=3D"max-width: 130px;"></a><a href=3D"http://srv.carbonad=
s.net/ads/click/x/GTND42QICK7IPKQWF6YLYKQMCK7ICK3JCKYICZ3JCW7IC2QIF67DC23KC=
6BICK7ICA7I6K3EHJNCLSIZ?segment=3Dplacement:mongoosejscom;" class=3D"carbon=
-text" target=3D"_blank" rel=3D"noopener">Students and Teachers, save up to=
 60% on Adobe Creative Cloud.</a></span><a href=3D"http://carbonads.net/?ut=
m_source=3Dmongoosejscom&amp;utm_medium=3Dad_via_link&amp;utm_campaign=3Din=
_unit&amp;utm_term=3Dcarbon" class=3D"carbon-poweredby" target=3D"_blank" r=
el=3D"noopener">ads via Carbon</a></span></div></ul></div></div><div class=
=3D"container"><div id=3D"content"><h2 id=3D"populate">Populate</h2>
<p>MongoDB has the join-like <a href=3D"https://docs.mongodb.com/manual/ref=
erence/operator/aggregation/lookup/">$lookup</a> aggregation operator in ve=
rsions &gt;=3D 3.2. Mongoose has a more powerful alternative called <code>p=
opulate()</code>, which lets you reference documents in other collections.<=
/p>
<p>Population is the process of automatically replacing the specified paths=
 in the document with document(s) from other collection(s). We may populate=
 a single document, multiple documents, plain object, multiple plain object=
s, or all objects returned from a query. Let's look at some examples.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> mongoose =3D <span class=3D"hljs-built_in">require</span>(<span class=3D"=
hljs-string">'mongoose'</span>);
<span class=3D"hljs-keyword">var</span> Schema =3D mongoose.Schema;

<span class=3D"hljs-keyword">var</span> personSchema =3D Schema({
  _id: Schema.Types.ObjectId,
  name: <span class=3D"hljs-built_in">String</span>,
  age: <span class=3D"hljs-built_in">Number</span>,
  stories: [{ type: Schema.Types.ObjectId, ref: <span class=3D"hljs-string"=
>'Story'</span> }]
});

<span class=3D"hljs-keyword">var</span> storySchema =3D Schema({
  author: { type: Schema.Types.ObjectId, ref: <span class=3D"hljs-string">'=
Person'</span> },
  title: <span class=3D"hljs-built_in">String</span>,
  fans: [{ type: Schema.Types.ObjectId, ref: <span class=3D"hljs-string">'P=
erson'</span> }]
});

<span class=3D"hljs-keyword">var</span> Story =3D mongoose.model(<span clas=
s=3D"hljs-string">'Story'</span>, storySchema);
<span class=3D"hljs-keyword">var</span> Person =3D mongoose.model(<span cla=
ss=3D"hljs-string">'Person'</span>, personSchema);
</code></pre>
<p>So far we've created two <a href=3D"http://mongoosejs.com/docs/models.ht=
ml">Models</a>. Our <code>Person</code> model has
its <code>stories</code> field set to an array of <code>ObjectId</code>s. T=
he <code>ref</code> option is
what tells Mongoose which model to use during population, in our case
the <code>Story</code> model. All <code>_id</code>s we store here must be d=
ocument <code>_id</code>s from
the <code>Story</code> model.</p>
<p><strong>Note</strong>: <code>ObjectId</code>, <code>Number</code>, <code=
>String</code>, and <code>Buffer</code> are valid for use
as refs. However, you should use <code>ObjectId</code> unless you are an ad=
vanced
user and have a good reason for doing so.</p>
<h3 id=3D"saving-refs"><a href=3D"http://mongoosejs.com/docs/populate.html#=
saving-refs">Saving refs</a></h3>

<p>Saving refs to other documents works the same way you normally save
properties, just assign the <code>_id</code> value:</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> author =3D <span class=3D"hljs-keyword">new</span> Person({
  _id: <span class=3D"hljs-keyword">new</span> mongoose.Types.ObjectId(),
  name: <span class=3D"hljs-string">'Ian Fleming'</span>,
  age: <span class=3D"hljs-number">50</span>
});

author.save(<span class=3D"hljs-function"><span class=3D"hljs-keyword">func=
tion</span> (<span class=3D"hljs-params">err</span>) </span>{
  <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keyword"=
>return</span> handleError(err);

  <span class=3D"hljs-keyword">var</span> story1 =3D <span class=3D"hljs-ke=
yword">new</span> Story({
    title: <span class=3D"hljs-string">'Casino Royale'</span>,
    author: author._id    <span class=3D"hljs-comment">// assign the _id fr=
om the person</span>
  });

  story1.save(<span class=3D"hljs-function"><span class=3D"hljs-keyword">fu=
nction</span> (<span class=3D"hljs-params">err</span>) </span>{
    <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keywor=
d">return</span> handleError(err);
    <span class=3D"hljs-comment">// thats it!</span>
  });
});
</code></pre>
<h3 id=3D"population"><a href=3D"http://mongoosejs.com/docs/populate.html#p=
opulation">Population</a></h3>

<p>So far we haven't done anything much different. We've merely created a
<code>Person</code> and a <code>Story</code>. Now let's take a look at popu=
lating our story's
<code>author</code> using the query builder:</p>
<pre><code class=3D"lang-javascript">Story.
  findOne({ title: <span class=3D"hljs-string">'Casino Royale'</span> }).
  populate(<span class=3D"hljs-string">'author'</span>).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span> (<span class=3D"hljs-params">err, story</span>) </span>{
    <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keywor=
d">return</span> handleError(err);
    <span class=3D"hljs-built_in">console</span>.log(<span class=3D"hljs-st=
ring">'The author is %s'</span><span class=3D"textlinkplus">, <a class=3D"t=
extlinkplus" href=3D"http://story.author.name/">story.author.name</a>);
    </span><span class=3D"hljs-comment">// prints "The author is Ian Flemin=
g"</span>
  });
</code></pre>
<p>Populated paths are no longer set to their original <code>_id</code> , t=
heir value
is replaced with the mongoose document returned from the database by
performing a separate query before returning the results.</p>
<p>Arrays of refs work the same way. Just call the
<a href=3D"http://mongoosejs.com/docs/api.html#query_Query-populate">popula=
te</a> method on the query and an
array of documents will be returned <em>in place</em> of the original <code=
>_id</code>s.</p>
<h3 id=3D"setting-populated-fields"><a href=3D"http://mongoosejs.com/docs/p=
opulate.html#setting-populated-fields">Setting Populated Fields</a></h3>

<p>In Mongoose &gt;=3D 4.0, you can manually populate a field as well.</p>
<pre><code class=3D"lang-javascript">Story.findOne({ title: <span class=3D"=
hljs-string">'Casino Royale'</span> }, <span class=3D"hljs-function"><span =
class=3D"hljs-keyword">function</span>(<span class=3D"hljs-params">error, s=
tory</span>) </span>{
  <span class=3D"hljs-keyword">if</span> (error) {
    <span class=3D"hljs-keyword">return</span> handleError(error);
  }
  story.author =3D author;
  <span class=3D"hljs-built_in">console</span><span class=3D"textlinkplus">=
.log(<a class=3D"textlinkplus" href=3D"http://story.author.name/">story.aut=
hor.name</a>); </span><span class=3D"hljs-comment">// prints "Ian Fleming"<=
/span>
});
</code></pre>
<h3 id=3D"field-selection"><a href=3D"http://mongoosejs.com/docs/populate.h=
tml#field-selection">Field Selection</a></h3>

<p>What if we only want a few specific fields returned for the populated
documents? This can be accomplished by passing the usual
<a href=3D"http://mongoosejs.com/docs/api.html#query_Query-select">field na=
me syntax</a> as the second argument
to the populate method:</p>
<pre><code class=3D"lang-javascript">Story.
  findOne({ title: <span class=3D"hljs-regexp">/casino royale/i</span> }).
  populate(<span class=3D"hljs-string">'author'</span>, <span class=3D"hljs=
-string">'name'</span>). <span class=3D"hljs-comment">// only return the Pe=
rsons name</span>
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span> (<span class=3D"hljs-params">err, story</span>) </span>{
    <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keywor=
d">return</span> handleError(err);

    <span class=3D"hljs-built_in">console</span>.log(<span class=3D"hljs-st=
ring">'The author is %s'</span><span class=3D"textlinkplus">, <a class=3D"t=
extlinkplus" href=3D"http://story.author.name/">story.author.name</a>);
    </span><span class=3D"hljs-comment">// prints "The author is Ian Flemin=
g"</span>

    <span class=3D"hljs-built_in">console</span>.log(<span class=3D"hljs-st=
ring">'The authors age is %s'</span>, story.author.age);
    <span class=3D"hljs-comment">// prints "The authors age is null'</span>
  });
</code></pre>
<h3 id=3D"populating-multiple-paths"><a href=3D"http://mongoosejs.com/docs/=
populate.html#populating-multiple-paths">Populating Multiple Paths</a></h3>

<p>What if we wanted to populate multiple paths at the same time?</p>
<pre><code class=3D"lang-javascript">Story.
  find(...).
  populate(<span class=3D"hljs-string">'fans'</span>).
  populate(<span class=3D"hljs-string">'author'</span>).
  exec();
</code></pre>
<p>If you call <code>populate()</code> multiple times with the same path, o=
nly the last
one will take effect.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// The 2n=
d `populate()` call below overwrites the first because they</span>
<span class=3D"hljs-comment">// both populate 'fans'.</span>
Story.
  find().
  populate({ path: <span class=3D"hljs-string">'fans'</span>, select: <span=
 class=3D"hljs-string">'name'</span> }).
  populate({ path: <span class=3D"hljs-string">'fans'</span>, select: <span=
 class=3D"hljs-string">'email'</span> });
<span class=3D"hljs-comment">// The above is equivalent to:</span>
Story.find().populate({ path: <span class=3D"hljs-string">'fans'</span>, se=
lect: <span class=3D"hljs-string">'email'</span> });
</code></pre>
<h3 id=3D"query-conditions"><a href=3D"http://mongoosejs.com/docs/populate.=
html#query-conditions">Query conditions and other options</a></h3>

<p>What if we wanted to populate our fans array based on their age, select
just their names, and return at most, any 5 of them?</p>
<pre><code class=3D"lang-javascript">Story.
  find(...).
  populate({
    path: <span class=3D"hljs-string">'fans'</span>,
    match: { age: { $gte: <span class=3D"hljs-number">21</span> }},
    <span class=3D"hljs-comment"><span class=3D"textlinkplus">// Explicitly=
 exclude `_id`, see <a class=3D"textlinkplus" href=3D"http://bit.ly/2aEfTdB=
">http://bit.ly/2aEfTdB</a></span></span>
    select: <span class=3D"hljs-string">'name -_id'</span>,
    options: { limit: <span class=3D"hljs-number">5</span> }
  }).
  exec();
</code></pre>
<h3 id=3D"refs-to-children"><a href=3D"http://mongoosejs.com/docs/populate.=
html#refs-to-children">Refs to children</a></h3>

<p>We may find however, if we use the <code>author</code> object, we are un=
able to get a
list of the stories. This is because no <code>story</code> objects were eve=
r 'pushed'
onto <code>author.stories</code>.</p>
<p>There are two perspectives here. First, you may want the <code>author</c=
ode> know
which stories are theirs. Usually, your schema should resolve
one-to-many relationships by having a parent pointer in the 'many' side.
But, if you have a good reason to want an array of child pointers, you
can <code>push()</code> documents onto the array as shown below.</p>
<pre><code class=3D"lang-javascript">author.stories.push(story1);
author.save(callback);
</code></pre>
<p>This allows us to perform a <code>find</code> and <code>populate</code> =
combo:</p>
<pre><code class=3D"lang-javascript">Person.
  findOne({ name: <span class=3D"hljs-string">'Ian Fleming'</span> }).
  populate(<span class=3D"hljs-string">'stories'</span>). <span class=3D"hl=
js-comment">// only works if we pushed refs to children</span>
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span> (<span class=3D"hljs-params">err, person</span>) </span>{
    <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keywor=
d">return</span> handleError(err);
    <span class=3D"hljs-built_in">console</span>.log(person);
  });
</code></pre>
<p>It is debatable that we really want two sets of pointers as they may get
out of sync. Instead we could skip populating and directly <code>find()</co=
de> the
stories we are interested in.</p>
<pre><code class=3D"lang-javascript">Story.
  find({ author: author._id }).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span> (<span class=3D"hljs-params">err, stories</span>) </span>{
    <span class=3D"hljs-keyword">if</span> (err) <span class=3D"hljs-keywor=
d">return</span> handleError(err);
    <span class=3D"hljs-built_in">console</span>.log(<span class=3D"hljs-st=
ring">'The stories are an array: '</span>, stories);
  });
</code></pre>
<p>The documents returned from
<a href=3D"http://mongoosejs.com/docs/api.html#query_Query-populate">query =
population</a> become fully
functional, <code>remove</code>able, <code>save</code>able documents unless=
 the
<a href=3D"http://mongoosejs.com/docs/api.html#query_Query-lean">lean</a> o=
ption is specified. Do not confuse
them with <a href=3D"http://mongoosejs.com/docs/subdocs.html">sub docs</a>.=
 Take caution when calling its
remove method because you'll be removing it from the database, not just
the array.</p>
<h3 id=3D"populate_an_existing_mongoose_document"><a href=3D"http://mongoos=
ejs.com/docs/populate.html#populate_an_existing_mongoose_document">Populati=
ng an existing document</a></h3>

<p>If we have an existing mongoose document and want to populate some of it=
s
paths, <strong>mongoose &gt;=3D 3.6</strong> supports the
<a href=3D"http://mongoosejs.com/docs/api.html#document_Document-populate">=
document#populate()</a> method.</p>
<h3 id=3D"populate_multiple_documents"><a href=3D"http://mongoosejs.com/doc=
s/populate.html#populate_multiple_documents">Populating multiple existing d=
ocuments</a></h3>

<p>If we have one or many mongoose documents or even plain objects
(_like <a href=3D"http://mongoosejs.com/docs/api.html#model_Model.mapReduce=
">mapReduce</a> output_), we may
populate them using the <a href=3D"http://mongoosejs.com/docs/api.html#mode=
l_Model.populate">Model.populate()</a>
method available in <strong>mongoose &gt;=3D 3.6</strong>. This is what <co=
de>document#populate()</code>
and <code>query#populate()</code> use to populate documents.</p>
<h3 id=3D"deep-populate"><a href=3D"http://mongoosejs.com/docs/populate.htm=
l#deep-populate">Populating across multiple levels</a></h3>

<p>Say you have a user schema which keeps track of the user's friends.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> userSchema =3D <span class=3D"hljs-keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>,
  friends: [{ type: ObjectId, ref: <span class=3D"hljs-string">'User'</span=
> }]
});
</code></pre>
<p>Populate lets you get a list of a user's friends, but what if you also
wanted a user's friends of friends? Specify the <code>populate</code> optio=
n to tell
mongoose to populate the <code>friends</code> array of all the user's frien=
ds:</p>
<pre><code class=3D"lang-javascript">User.
  findOne({ name: <span class=3D"hljs-string">'Val'</span> }).
  populate({
    path: <span class=3D"hljs-string">'friends'</span>,
    <span class=3D"hljs-comment">// Get friends of friends - populate the '=
friends' array for every friend</span>
    populate: { path: <span class=3D"hljs-string">'friends'</span> }
  });
</code></pre>
<h3 id=3D"cross-db-populate"><a href=3D"http://mongoosejs.com/docs/populate=
.html#cross-db-populate">Populating across Databases</a></h3>

<p>Let's say you have a schema representing events, and a schema representi=
ng
conversations. Each event has a corresponding conversation thread.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> eventSchema =3D <span class=3D"hljs-keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>,
  <span class=3D"hljs-comment">// The id of the corresponding conversation<=
/span>
  <span class=3D"hljs-comment">// Notice there's no ref here!</span>
  conversation: ObjectId
});
<span class=3D"hljs-keyword">var</span> conversationSchema =3D <span class=
=3D"hljs-keyword">new</span> Schema({
  numMessages: <span class=3D"hljs-built_in">Number</span>
});
</code></pre>
<p>Also, suppose that events and conversations are stored in separate Mongo=
DB
instances.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> db1 =3D mongoose.createConnection(<span class=3D"hljs-string">'localhost:=
27000/db1'</span>);
<span class=3D"hljs-keyword">var</span> db2 =3D mongoose.createConnection(<=
span class=3D"hljs-string">'localhost:27001/db2'</span>);

<span class=3D"hljs-keyword">var</span> Event =3D db1.model(<span class=3D"=
hljs-string">'Event'</span>, eventSchema);
<span class=3D"hljs-keyword">var</span> Conversation =3D db2.model(<span cl=
ass=3D"hljs-string">'Conversation'</span>, conversationSchema);
</code></pre>
<p>In this situation, you will <strong>not</strong> be able to <code>popula=
te()</code> normally.
The <code>conversation</code> field will always be null, because <code>popu=
late()</code> doesn't
know which model to use. However,
<a href=3D"http://mongoosejs.com/docs/api.html#model_Model.populate">you ca=
n specify the model explicitly</a>.</p>
<pre><code class=3D"lang-javascript">Event.
  find().
  populate({ path: <span class=3D"hljs-string">'conversation'</span>, model=
: Conversation }).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span>(<span class=3D"hljs-params">error, docs</span>) </span>{ <span class=
=3D"hljs-comment">/* ... */</span> });
</code></pre>
<p>This is known as a "cross-database populate," because it enables you to
populate across MongoDB databases and even across MongoDB instances.</p>
<h3 id=3D"dynamic-ref"><a href=3D"http://mongoosejs.com/docs/populate.html#=
dynamic-ref">Dynamic References</a></h3>

<p>Mongoose can also populate from multiple collections at the same time.
Let's say you have a user schema that has an array of "connections" - a
user can be connected to either other users or an organization.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> userSchema =3D <span class=3D"hljs-keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>,
  connections: [{
    kind: <span class=3D"hljs-built_in">String</span>,
    item: { type: ObjectId, refPath: <span class=3D"hljs-string">'connectio=
ns.kind'</span> }
  }]
});

<span class=3D"hljs-keyword">var</span> organizationSchema =3D <span class=
=3D"hljs-keyword">new</span> Schema({ name: <span class=3D"hljs-built_in">S=
tring</span>, kind: <span class=3D"hljs-built_in">String</span> });

<span class=3D"hljs-keyword">var</span> User =3D mongoose.model(<span class=
=3D"hljs-string">'User'</span>, userSchema);
<span class=3D"hljs-keyword">var</span> Organization =3D mongoose.model(<sp=
an class=3D"hljs-string">'Organization'</span>, organizationSchema);
</code></pre>
<p>The <code>refPath</code> property above means that mongoose will look at=
 the
<code>connections.kind</code> path to determine which model to use for <cod=
e>populate()</code>.
In other words, the <code>refPath</code> property enables you to make the <=
code>ref</code>
property dynamic.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Say we=
 have one organization:</span>
<span class=3D"hljs-comment">// `{ _id: ObjectId('000000000000000000000001'=
), name: "Guns N' Roses", kind: 'Band' }`</span>
<span class=3D"hljs-comment">// And two users:</span>
<span class=3D"hljs-comment">// {</span>
<span class=3D"hljs-comment">//   _id: ObjectId('000000000000000000000002')=
</span>
<span class=3D"hljs-comment">//   name: 'Axl Rose',</span>
<span class=3D"hljs-comment">//   connections: [</span>
<span class=3D"hljs-comment">//     { kind: 'User', item: ObjectId('0000000=
00000000000000003') },</span>
<span class=3D"hljs-comment">//     { kind: 'Organization', item: ObjectId(=
'000000000000000000000001') }</span>
<span class=3D"hljs-comment">//   ]</span>
<span class=3D"hljs-comment">// },</span>
<span class=3D"hljs-comment">// {</span>
<span class=3D"hljs-comment">//   _id: ObjectId('000000000000000000000003')=
</span>
<span class=3D"hljs-comment">//   name: 'Slash',</span>
<span class=3D"hljs-comment">//   connections: []</span>
<span class=3D"hljs-comment">// }</span>
User.
  findOne({ name: <span class=3D"hljs-string">'Axl Rose'</span> }).
  populate(<span class=3D"hljs-string">'connections.item'</span>).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span>(<span class=3D"hljs-params">error, doc</span>) </span>{
    <span class=3D"hljs-comment">// doc.connections[0].item is a User doc</=
span>
    <span class=3D"hljs-comment">// doc.connections[1].item is an Organizat=
ion doc</span>
  });
</code></pre>
<h3 id=3D"populate-virtuals"><a href=3D"http://mongoosejs.com/docs/populate=
.html#populate-virtuals">Populate Virtuals</a></h3>

<p><em>New in 4.5.0</em></p>
<p>So far you've only populated based on the <code>_id</code> field. Howeve=
r, that's
sometimes not the right choice.
In particular, <a href=3D"https://docs.mongodb.com/manual/tutorial/model-re=
ferenced-one-to-many-relationships-between-documents/">arrays that grow wit=
hout bound are a MongoDB anti-pattern</a>.
Using mongoose virtuals, you can define more sophisticated relationships
between documents.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-keyword">var</span=
> PersonSchema =3D <span class=3D"hljs-keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>,
  band: <span class=3D"hljs-built_in">String</span>
});

<span class=3D"hljs-keyword">var</span> BandSchema =3D <span class=3D"hljs-=
keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>
});
BandSchema.virtual(<span class=3D"hljs-string">'members'</span>, {
  ref: <span class=3D"hljs-string">'Person'</span>, <span class=3D"hljs-com=
ment">// The model to use</span>
  localField: <span class=3D"hljs-string">'name'</span>, <span class=3D"hlj=
s-comment">// Find people where `localField`</span>
  foreignField: <span class=3D"hljs-string">'band'</span>, <span class=3D"h=
ljs-comment">// is equal to `foreignField`</span>
  <span class=3D"hljs-comment">// If `justOne` is true, 'members' will be a=
 single doc as opposed to</span>
  <span class=3D"hljs-comment">// an array. `justOne` is false by default.<=
/span>
  justOne: <span class=3D"hljs-literal">false</span>
});

<span class=3D"hljs-keyword">var</span> Person =3D mongoose.model(<span cla=
ss=3D"hljs-string">'Person'</span>, PersonSchema);
<span class=3D"hljs-keyword">var</span> Band =3D mongoose.model(<span class=
=3D"hljs-string">'Band'</span>, BandSchema);

<span class=3D"hljs-comment">/**
 * Suppose you have 2 bands: "Guns N' Roses" and "Motley Crue"
 * And 4 people: "Axl Rose" and "Slash" with "Guns N' Roses", and
 * "Vince Neil" and "Nikki Sixx" with "Motley Crue"
 */</span>
Band.find({}).populate(<span class=3D"hljs-string">'members'</span>).exec(<=
span class=3D"hljs-function"><span class=3D"hljs-keyword">function</span>(<=
span class=3D"hljs-params">error, bands</span>) </span>{
  <span class=3D"hljs-comment">/* `bands.members` is now an array of instan=
ces of `Person` */</span>
});
</code></pre>
<p>Keep in mind that virtuals are <em>not</em> included in <code>toJSON()</=
code> output by default. If you want populate virtuals to show up when usin=
g functions
that rely on <code>JSON.stringify()</code>, like Express'
<a href=3D"http://expressjs.com/en/4x/api.html#res.json"><code>res.json()</=
code> function</a>,
set the <code>virtuals: true</code> option on your schema's <code>toJSON</c=
ode> options.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Set `v=
irtuals: true` so `res.json()` works</span>
<span class=3D"hljs-keyword">var</span> BandSchema =3D <span class=3D"hljs-=
keyword">new</span> Schema({
  name: <span class=3D"hljs-built_in">String</span>
}, { toJSON: { virtuals: <span class=3D"hljs-literal">true</span> } });
</code></pre>
<p>If you're using populate projections, make sure <code>foreignField</code=
> is included
in the projection.</p>
<pre><code class=3D"lang-javascript">Band.
  find({}).
  populate({ path: <span class=3D"hljs-string">'members'</span>, select: <s=
pan class=3D"hljs-string">'name'</span> }).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span>(<span class=3D"hljs-params">error, bands</span>) </span>{
    <span class=3D"hljs-comment">// Won't work, foreign field `band` is not=
 selected in the projection</span>
  });

Band.
  find({}).
  populate({ path: <span class=3D"hljs-string">'members'</span>, select: <s=
pan class=3D"hljs-string">'name band'</span> }).
  exec(<span class=3D"hljs-function"><span class=3D"hljs-keyword">function<=
/span>(<span class=3D"hljs-params">error, bands</span>) </span>{
    <span class=3D"hljs-comment">// Works, foreign field `band` is selected=
</span>
  });
</code></pre>
<h3 id=3D"populate-middleware"><a href=3D"http://mongoosejs.com/docs/popula=
te.html#populate-middleware">Populate in Middleware</a></h3>

<p>You can populate in either pre or post <a href=3D"http://mongoosejs.com/=
docs/middleware.html">hooks</a>. If you want to
always populate a certain field, check out the <a href=3D"http://npmjs.com/=
package/mongoose-autopopulate">mongoose-autopopulate plugin</a>.</p>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Always=
 attach `populate()` to `find()` calls</span>
MySchema.pre(<span class=3D"hljs-string">'find'</span>, <span class=3D"hljs=
-function"><span class=3D"hljs-keyword">function</span>(<span class=3D"hljs=
-params"></span>) </span>{
  <span class=3D"hljs-keyword">this</span>.populate(<span class=3D"hljs-str=
ing">'user'</span>);
});
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// Always=
 `populate()` after `find()` calls. Useful if you want to selectively popul=
ate</span>
<span class=3D"hljs-comment">// based on the docs found.</span>
MySchema.post(<span class=3D"hljs-string">'find'</span>, <span class=3D"hlj=
s-keyword">async</span> <span class=3D"hljs-function"><span class=3D"hljs-k=
eyword">function</span>(<span class=3D"hljs-params">docs</span>) </span>{
  <span class=3D"hljs-keyword">for</span> (<span class=3D"hljs-keyword">let=
</span> doc <span class=3D"hljs-keyword">of</span> docs) {
    <span class=3D"hljs-keyword">if</span> (doc.isPublic) {
      <span class=3D"hljs-keyword">await</span> doc.populate(<span class=3D=
"hljs-string">'user'</span>).execPopulate();
    }
  }
});
</code></pre>
<pre><code class=3D"lang-javascript"><span class=3D"hljs-comment">// `popul=
ate()` after saving. Useful for sending populated data back to the client i=
n an</span>
<span class=3D"hljs-comment">// update API endpoint</span>
MySchema.post(<span class=3D"hljs-string">'save'</span>, <span class=3D"hlj=
s-function"><span class=3D"hljs-keyword">function</span>(<span class=3D"hlj=
s-params">doc, next</span>) </span>{
  doc.populate(<span class=3D"hljs-string">'user'</span>).execPopulate(<spa=
n class=3D"hljs-function"><span class=3D"hljs-keyword">function</span>(<spa=
n class=3D"hljs-params"></span>) </span>{
    next();
  });
});
</code></pre>
<h3 id=3D"next-up">Next Up</h3>
<p>Now that we've covered <code>populate()</code>, let's take a look at <a =
href=3D"http://mongoosejs.com/docs/discriminators.html">discriminators</a>.=
</p>
</div></div></div></body><template shadowmode=3D"v0"><shadow></shadow><styl=
e></style></template></html>
------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://unpkg.com/purecss@1.0.0/build/pure-min.css

@charset "utf-8";

.pure-button:focus, a:active, a:hover { outline: 0px; }

.pure-table, table { border-collapse: collapse; border-spacing: 0px; }

html { font-family: sans-serif; text-size-adjust: 100%; }

body { margin: 0px; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, =
menu, nav, section, summary { display: block; }

audio, canvas, progress, video { display: inline-block; vertical-align: bas=
eline; }

audio:not([controls]) { display: none; height: 0px; }

[hidden], template { display: none; }

a { background-color: transparent; }

abbr[title] { border-bottom: 1px dotted; }

b, optgroup, strong { font-weight: 700; }

dfn { font-style: italic; }

h1 { font-size: 2em; margin: 0.67em 0px; }

mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

figure { margin: 1em 40px; }

hr { box-sizing: content-box; height: 0px; }

pre, textarea { overflow: auto; }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { color: inherit; font: inherit; =
margin: 0px; }

.pure-button, input { line-height: normal; }

button { overflow: visible; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { -webkit-appearance: button; cursor: pointer; }

button[disabled], html input[disabled] { cursor: default; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { -webkit-appearance: textfield; box-sizing: content=
-box; }

.pure-button, .pure-form input:not([type]), .pure-menu { box-sizing: border=
-box; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { -webkit-appearance: none; }

fieldset { border: 1px solid silver; margin: 0px 2px; padding: 0.35em 0.625=
em 0.75em; }

legend, td, th { padding: 0px; }

legend { border: 0px; }

.hidden, [hidden] { display: none !important; }

.pure-img { max-width: 100%; height: auto; display: block; }

.pure-g { letter-spacing: -0.31em; text-rendering: optimizeSpeed; font-fami=
ly: FreeSans, Arimo, "Droid Sans", Helvetica, Arial, sans-serif; display: f=
lex; flex-flow: row wrap; align-content: flex-start; }

@media not all, not all {
  table .pure-g { display: block; }
}

.pure-u, .pure-u-1, .pure-u-1-1, .pure-u-1-12, .pure-u-1-2, .pure-u-1-24, .=
pure-u-1-3, .pure-u-1-4, .pure-u-1-5, .pure-u-1-6, .pure-u-1-8, .pure-u-10-=
24, .pure-u-11-12, .pure-u-11-24, .pure-u-12-24, .pure-u-13-24, .pure-u-14-=
24, .pure-u-15-24, .pure-u-16-24, .pure-u-17-24, .pure-u-18-24, .pure-u-19-=
24, .pure-u-2-24, .pure-u-2-3, .pure-u-2-5, .pure-u-20-24, .pure-u-21-24, .=
pure-u-22-24, .pure-u-23-24, .pure-u-24-24, .pure-u-3-24, .pure-u-3-4, .pur=
e-u-3-5, .pure-u-3-8, .pure-u-4-24, .pure-u-4-5, .pure-u-5-12, .pure-u-5-24=
, .pure-u-5-5, .pure-u-5-6, .pure-u-5-8, .pure-u-6-24, .pure-u-7-12, .pure-=
u-7-24, .pure-u-7-8, .pure-u-8-24, .pure-u-9-24 { letter-spacing: normal; w=
ord-spacing: normal; vertical-align: top; text-rendering: auto; display: in=
line-block; zoom: 1; }

.pure-g [class*=3D"pure-u"] { font-family: sans-serif; }

.pure-u-1-24 { width: 4.1667%; }

.pure-u-1-12, .pure-u-2-24 { width: 8.3333%; }

.pure-u-1-8, .pure-u-3-24 { width: 12.5%; }

.pure-u-1-6, .pure-u-4-24 { width: 16.6667%; }

.pure-u-1-5 { width: 20%; }

.pure-u-5-24 { width: 20.8333%; }

.pure-u-1-4, .pure-u-6-24 { width: 25%; }

.pure-u-7-24 { width: 29.1667%; }

.pure-u-1-3, .pure-u-8-24 { width: 33.3333%; }

.pure-u-3-8, .pure-u-9-24 { width: 37.5%; }

.pure-u-2-5 { width: 40%; }

.pure-u-10-24, .pure-u-5-12 { width: 41.6667%; }

.pure-u-11-24 { width: 45.8333%; }

.pure-u-1-2, .pure-u-12-24 { width: 50%; }

.pure-u-13-24 { width: 54.1667%; }

.pure-u-14-24, .pure-u-7-12 { width: 58.3333%; }

.pure-u-3-5 { width: 60%; }

.pure-u-15-24, .pure-u-5-8 { width: 62.5%; }

.pure-u-16-24, .pure-u-2-3 { width: 66.6667%; }

.pure-u-17-24 { width: 70.8333%; }

.pure-u-18-24, .pure-u-3-4 { width: 75%; }

.pure-u-19-24 { width: 79.1667%; }

.pure-u-4-5 { width: 80%; }

.pure-u-20-24, .pure-u-5-6 { width: 83.3333%; }

.pure-u-21-24, .pure-u-7-8 { width: 87.5%; }

.pure-u-11-12, .pure-u-22-24 { width: 91.6667%; }

.pure-u-23-24 { width: 95.8333%; }

.pure-u-1, .pure-u-1-1, .pure-u-24-24, .pure-u-5-5 { width: 100%; }

.pure-button { display: inline-block; zoom: 1; white-space: nowrap; vertica=
l-align: middle; text-align: center; cursor: pointer; -webkit-user-drag: no=
ne; user-select: none; }

.pure-button-group { letter-spacing: -0.31em; text-rendering: optimizeSpeed=
; }

.pure-button { font-family: inherit; font-size: 100%; padding: 0.5em 1em; c=
olor: rgba(0, 0, 0, 0.8); border: transparent; background-color: rgb(230, 2=
30, 230); text-decoration: none; border-radius: 2px; }

.pure-button-hover, .pure-button:focus, .pure-button:hover { background-ima=
ge: linear-gradient(transparent, rgba(0, 0, 0, 0.05) 40%, rgba(0, 0, 0, 0.1=
)); }

.pure-button-active, .pure-button:active { box-shadow: rgba(0, 0, 0, 0.15) =
0px 0px 0px 1px inset, rgba(0, 0, 0, 0.2) 0px 0px 6px inset; }

.pure-button-disabled, .pure-button-disabled:active, .pure-button-disabled:=
focus, .pure-button-disabled:hover, .pure-button[disabled] { border: none; =
background-image: none; opacity: 0.4; cursor: not-allowed; box-shadow: none=
; pointer-events: none; }

.pure-button-hidden { display: none; }

.pure-button-primary, .pure-button-selected, a.pure-button-primary, a.pure-=
button-selected { background-color: rgb(0, 120, 231); color: rgb(255, 255, =
255); }

.pure-button-group .pure-button { letter-spacing: normal; word-spacing: nor=
mal; vertical-align: top; text-rendering: auto; margin: 0px; border-radius:=
 0px; border-right: 1px solid rgba(0, 0, 0, 0.2); }

.pure-button-group .pure-button:first-child { border-top-left-radius: 2px; =
border-bottom-left-radius: 2px; }

.pure-button-group .pure-button:last-child { border-top-right-radius: 2px; =
border-bottom-right-radius: 2px; border-right: none; }

.pure-form input[type=3D"password"], .pure-form input[type=3D"email"], .pur=
e-form input[type=3D"url"], .pure-form input[type=3D"date"], .pure-form inp=
ut[type=3D"month"], .pure-form input[type=3D"time"], .pure-form input[type=
=3D"datetime"], .pure-form input[type=3D"datetime-local"], .pure-form input=
[type=3D"week"], .pure-form input[type=3D"tel"], .pure-form input[type=3D"c=
olor"], .pure-form input[type=3D"number"], .pure-form input[type=3D"search"=
], .pure-form input[type=3D"text"], .pure-form select, .pure-form textarea =
{ padding: 0.5em 0.6em; display: inline-block; border: 1px solid rgb(204, 2=
04, 204); box-shadow: rgb(221, 221, 221) 0px 1px 3px inset; border-radius: =
4px; vertical-align: middle; box-sizing: border-box; }

.pure-form input:not([type]) { padding: 0.5em 0.6em; display: inline-block;=
 border: 1px solid rgb(204, 204, 204); box-shadow: rgb(221, 221, 221) 0px 1=
px 3px inset; border-radius: 4px; }

.pure-form input[type=3D"color"] { padding: 0.2em 0.5em; }

.pure-form input:not([type]):focus, .pure-form input[type=3D"password"]:foc=
us, .pure-form input[type=3D"email"]:focus, .pure-form input[type=3D"url"]:=
focus, .pure-form input[type=3D"date"]:focus, .pure-form input[type=3D"mont=
h"]:focus, .pure-form input[type=3D"time"]:focus, .pure-form input[type=3D"=
datetime"]:focus, .pure-form input[type=3D"datetime-local"]:focus, .pure-fo=
rm input[type=3D"week"]:focus, .pure-form input[type=3D"tel"]:focus, .pure-=
form input[type=3D"color"]:focus, .pure-form input[type=3D"number"]:focus, =
.pure-form input[type=3D"search"]:focus, .pure-form input[type=3D"text"]:fo=
cus, .pure-form select:focus, .pure-form textarea:focus { outline: 0px; bor=
der-color: rgb(18, 159, 234); }

.pure-form input[type=3D"file"]:focus, .pure-form input[type=3D"checkbox"]:=
focus, .pure-form input[type=3D"radio"]:focus { outline: rgb(18, 159, 234) =
auto 1px; }

.pure-form .pure-checkbox, .pure-form .pure-radio { margin: 0.5em 0px; disp=
lay: block; }

.pure-form input:not([type])[disabled], .pure-form input[type=3D"password"]=
[disabled], .pure-form input[type=3D"email"][disabled], .pure-form input[ty=
pe=3D"url"][disabled], .pure-form input[type=3D"date"][disabled], .pure-for=
m input[type=3D"month"][disabled], .pure-form input[type=3D"time"][disabled=
], .pure-form input[type=3D"datetime"][disabled], .pure-form input[type=3D"=
datetime-local"][disabled], .pure-form input[type=3D"week"][disabled], .pur=
e-form input[type=3D"tel"][disabled], .pure-form input[type=3D"color"][disa=
bled], .pure-form input[type=3D"number"][disabled], .pure-form input[type=
=3D"search"][disabled], .pure-form input[type=3D"text"][disabled], .pure-fo=
rm select[disabled], .pure-form textarea[disabled] { cursor: not-allowed; b=
ackground-color: rgb(234, 237, 237); color: rgb(202, 210, 211); }

.pure-form input[readonly], .pure-form select[readonly], .pure-form textare=
a[readonly] { background-color: rgb(238, 238, 238); color: rgb(119, 119, 11=
9); border-color: rgb(204, 204, 204); }

.pure-form input:focus:invalid, .pure-form select:focus:invalid, .pure-form=
 textarea:focus:invalid { color: rgb(185, 74, 72); border-color: rgb(233, 5=
0, 45); }

.pure-form input[type=3D"file"]:focus:invalid:focus, .pure-form input[type=
=3D"checkbox"]:focus:invalid:focus, .pure-form input[type=3D"radio"]:focus:=
invalid:focus { outline-color: rgb(233, 50, 45); }

.pure-form select { height: 2.25em; border: 1px solid rgb(204, 204, 204); b=
ackground-color: rgb(255, 255, 255); }

.pure-form select[multiple] { height: auto; }

.pure-form label { margin: 0.5em 0px 0.2em; }

.pure-form fieldset { margin: 0px; padding: 0.35em 0px 0.75em; border: 0px;=
 }

.pure-form legend { display: block; width: 100%; padding: 0.3em 0px; margin=
-bottom: 0.3em; color: rgb(51, 51, 51); border-bottom: 1px solid rgb(229, 2=
29, 229); }

.pure-form-stacked input:not([type]), .pure-form-stacked input[type=3D"pass=
word"], .pure-form-stacked input[type=3D"email"], .pure-form-stacked input[=
type=3D"url"], .pure-form-stacked input[type=3D"date"], .pure-form-stacked =
input[type=3D"month"], .pure-form-stacked input[type=3D"time"], .pure-form-=
stacked input[type=3D"datetime"], .pure-form-stacked input[type=3D"datetime=
-local"], .pure-form-stacked input[type=3D"week"], .pure-form-stacked input=
[type=3D"tel"], .pure-form-stacked input[type=3D"color"], .pure-form-stacke=
d input[type=3D"file"], .pure-form-stacked input[type=3D"number"], .pure-fo=
rm-stacked input[type=3D"search"], .pure-form-stacked input[type=3D"text"],=
 .pure-form-stacked label, .pure-form-stacked select, .pure-form-stacked te=
xtarea { display: block; margin: 0.25em 0px; }

.pure-form-aligned .pure-help-inline, .pure-form-aligned input, .pure-form-=
aligned select, .pure-form-aligned textarea, .pure-form-message-inline { di=
splay: inline-block; vertical-align: middle; }

.pure-form-aligned textarea { vertical-align: top; }

.pure-form-aligned .pure-control-group { margin-bottom: 0.5em; }

.pure-form-aligned .pure-control-group label { text-align: right; display: =
inline-block; vertical-align: middle; width: 10em; margin: 0px 1em 0px 0px;=
 }

.pure-form-aligned .pure-controls { margin: 1.5em 0px 0px 11em; }

.pure-form .pure-input-rounded, .pure-form input.pure-input-rounded { borde=
r-radius: 2em; padding: 0.5em 1em; }

.pure-form .pure-group fieldset { margin-bottom: 10px; }

.pure-form .pure-group input, .pure-form .pure-group textarea { display: bl=
ock; padding: 10px; margin: 0px 0px -1px; border-radius: 0px; position: rel=
ative; top: -1px; }

.pure-form .pure-group input:focus, .pure-form .pure-group textarea:focus {=
 z-index: 3; }

.pure-form .pure-group input:first-child, .pure-form .pure-group textarea:f=
irst-child { top: 1px; border-radius: 4px 4px 0px 0px; margin: 0px; }

.pure-form .pure-group input:first-child:last-child, .pure-form .pure-group=
 textarea:first-child:last-child { top: 1px; border-radius: 4px; margin: 0p=
x; }

.pure-form .pure-group input:last-child, .pure-form .pure-group textarea:la=
st-child { top: -2px; border-radius: 0px 0px 4px 4px; margin: 0px; }

.pure-form .pure-group button { margin: 0.35em 0px; }

.pure-form .pure-input-1 { width: 100%; }

.pure-form .pure-input-3-4 { width: 75%; }

.pure-form .pure-input-2-3 { width: 66%; }

.pure-form .pure-input-1-2 { width: 50%; }

.pure-form .pure-input-1-3 { width: 33%; }

.pure-form .pure-input-1-4 { width: 25%; }

.pure-form .pure-help-inline, .pure-form-message-inline { display: inline-b=
lock; padding-left: 0.3em; color: rgb(102, 102, 102); vertical-align: middl=
e; font-size: 0.875em; }

.pure-form-message { display: block; color: rgb(102, 102, 102); font-size: =
0.875em; }

@media only screen and (max-width: 480px) {
  .pure-form button[type=3D"submit"] { margin: 0.7em 0px 0px; }
  .pure-form input:not([type]), .pure-form input[type=3D"password"], .pure-=
form input[type=3D"email"], .pure-form input[type=3D"url"], .pure-form inpu=
t[type=3D"date"], .pure-form input[type=3D"month"], .pure-form input[type=
=3D"time"], .pure-form input[type=3D"datetime"], .pure-form input[type=3D"d=
atetime-local"], .pure-form input[type=3D"week"], .pure-form input[type=3D"=
tel"], .pure-form input[type=3D"color"], .pure-form input[type=3D"number"],=
 .pure-form input[type=3D"search"], .pure-form input[type=3D"text"], .pure-=
form label { margin-bottom: 0.3em; display: block; }
  .pure-group input:not([type]), .pure-group input[type=3D"password"], .pur=
e-group input[type=3D"email"], .pure-group input[type=3D"url"], .pure-group=
 input[type=3D"date"], .pure-group input[type=3D"month"], .pure-group input=
[type=3D"time"], .pure-group input[type=3D"datetime"], .pure-group input[ty=
pe=3D"datetime-local"], .pure-group input[type=3D"week"], .pure-group input=
[type=3D"tel"], .pure-group input[type=3D"color"], .pure-group input[type=
=3D"number"], .pure-group input[type=3D"search"], .pure-group input[type=3D=
"text"] { margin-bottom: 0px; }
  .pure-form-aligned .pure-control-group label { margin-bottom: 0.3em; text=
-align: left; display: block; width: 100%; }
  .pure-form-aligned .pure-controls { margin: 1.5em 0px 0px; }
  .pure-form .pure-help-inline, .pure-form-message, .pure-form-message-inli=
ne { display: block; font-size: 0.75em; padding: 0.2em 0px 0.8em; }
}

.pure-menu-fixed { position: fixed; left: 0px; top: 0px; z-index: 3; }

.pure-menu-item, .pure-menu-list { position: relative; }

.pure-menu-list { list-style: none; margin: 0px; padding: 0px; }

.pure-menu-item { padding: 0px; margin: 0px; height: 100%; }

.pure-menu-heading, .pure-menu-link { display: block; text-decoration: none=
; white-space: nowrap; }

.pure-menu-horizontal { width: 100%; white-space: nowrap; }

.pure-menu-horizontal .pure-menu-list { display: inline-block; }

.pure-menu-horizontal .pure-menu-heading, .pure-menu-horizontal .pure-menu-=
item, .pure-menu-horizontal .pure-menu-separator { display: inline-block; z=
oom: 1; vertical-align: middle; }

.pure-menu-item .pure-menu-item { display: block; }

.pure-menu-children { display: none; position: absolute; left: 100%; top: 0=
px; margin: 0px; padding: 0px; z-index: 3; }

.pure-menu-horizontal .pure-menu-children { left: 0px; top: auto; width: in=
herit; }

.pure-menu-active > .pure-menu-children, .pure-menu-allow-hover:hover > .pu=
re-menu-children { display: block; position: absolute; }

.pure-menu-has-children > .pure-menu-link::after { padding-left: 0.5em; con=
tent: "=E2=96=B8"; font-size: small; }

.pure-menu-horizontal .pure-menu-has-children > .pure-menu-link::after { co=
ntent: "=E2=96=BE"; }

.pure-menu-scrollable { overflow: hidden scroll; }

.pure-menu-scrollable .pure-menu-list { display: block; }

.pure-menu-horizontal.pure-menu-scrollable .pure-menu-list { display: inlin=
e-block; }

.pure-menu-horizontal.pure-menu-scrollable { white-space: nowrap; overflow:=
 auto hidden; padding: 0.5em 0px; }

.pure-menu-horizontal.pure-menu-scrollable::-webkit-scrollbar { display: no=
ne; }

.pure-menu-horizontal .pure-menu-children .pure-menu-separator, .pure-menu-=
separator { background-color: rgb(204, 204, 204); height: 1px; margin: 0.3e=
m 0px; }

.pure-menu-horizontal .pure-menu-separator { width: 1px; height: 1.3em; mar=
gin: 0px 0.3em; }

.pure-menu-horizontal .pure-menu-children .pure-menu-separator { display: b=
lock; width: auto; }

.pure-menu-heading { text-transform: uppercase; color: rgb(86, 93, 100); }

.pure-menu-link { color: rgb(119, 119, 119); }

.pure-menu-children { background-color: rgb(255, 255, 255); }

.pure-menu-disabled, .pure-menu-heading, .pure-menu-link { padding: 0.5em 1=
em; }

.pure-menu-disabled { opacity: 0.5; }

.pure-menu-disabled .pure-menu-link:hover { background-color: transparent; =
}

.pure-menu-active > .pure-menu-link, .pure-menu-link:focus, .pure-menu-link=
:hover { background-color: rgb(238, 238, 238); }

.pure-menu-selected .pure-menu-link, .pure-menu-selected .pure-menu-link:vi=
sited { color: rgb(0, 0, 0); }

.pure-table { empty-cells: show; border: 1px solid rgb(203, 203, 203); }

.pure-table caption { color: rgb(0, 0, 0); font: italic 85%/1 arial, sans-s=
erif; padding: 1em 0px; text-align: center; }

.pure-table td, .pure-table th { border-left: 1px solid rgb(203, 203, 203);=
 border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; =
font-size: inherit; margin: 0px; overflow: visible; padding: 0.5em 1em; }

.pure-table td:first-child, .pure-table th:first-child { border-left-width:=
 0px; }

.pure-table thead { background-color: rgb(224, 224, 224); color: rgb(0, 0, =
0); text-align: left; vertical-align: bottom; }

.pure-table td { background-color: transparent; }

.pure-table-odd td, .pure-table-striped tr:nth-child(2n-1) td { background-=
color: rgb(242, 242, 242); }

.pure-table-bordered td { border-bottom: 1px solid rgb(203, 203, 203); }

.pure-table-bordered tbody > tr:last-child > td { border-bottom-width: 0px;=
 }

.pure-table-horizontal td, .pure-table-horizontal th { border-width: 0px 0p=
x 1px; border-bottom-style: solid; border-bottom-color: rgb(203, 203, 203);=
 }

.pure-table-horizontal tbody > tr:last-child > td { border-bottom-width: 0p=
x; }
------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Open+Sans

@charset "utf-8";

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFWJ0bbck.woff2") format=
("woff2"); unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A6=
40-A69F, U+FE2E-FE2F; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFUZ0bbck.woff2") format=
("woff2"); unicode-range: U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFWZ0bbck.woff2") format=
("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFVp0bbck.woff2") format=
("woff2"); unicode-range: U+370-3FF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFWp0bbck.woff2") format=
("woff2"); unicode-range: U+102-103, U+110-111, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFW50bbck.woff2") format=
("woff2"); unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20A=
B, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Open Sans"; font-style: normal; font-weight: 400=
; src: local("Open Sans Regular"), local("OpenSans-Regular"), url("https://=
fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFVZ0b.woff2") format("w=
off2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U=
+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, =
U+FEFF, U+FFFD; }
------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: font/woff2
Content-Transfer-Encoding: base64
Content-Location: https://fonts.gstatic.com/s/opensans/v15/mem8YaGs126MiZpBA-UFVZ0b.woff2

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
p5OorF54wXFuvfDiS06WftF5wQogvzenbwE=

------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://mongoosejs.com/docs/css/github.css

@charset "utf-8";

.hljs { display: block; overflow-x: auto; padding: 0.5em; color: rgb(51, 51=
, 51); background: rgb(248, 248, 248); text-size-adjust: none; }

.hljs-comment, .diff .hljs-header, .hljs-javadoc { color: rgb(153, 153, 136=
); font-style: italic; }

.hljs-keyword, .css .rule .hljs-keyword, .hljs-winutils, .nginx .hljs-title=
, .hljs-subst, .hljs-request, .hljs-status { color: rgb(51, 51, 51); font-w=
eight: bold; }

.hljs-number, .hljs-hexcolor, .ruby .hljs-constant { color: rgb(0, 128, 128=
); }

.hljs-string, .hljs-tag .hljs-value, .hljs-phpdoc, .hljs-dartdoc, .tex .hlj=
s-formula { color: rgb(221, 17, 68); }

.hljs-title, .hljs-id, .scss .hljs-preprocessor { color: rgb(153, 0, 0); fo=
nt-weight: bold; }

.hljs-list .hljs-keyword, .hljs-subst { font-weight: normal; }

.hljs-class .hljs-title, .hljs-type, .vhdl .hljs-literal, .tex .hljs-comman=
d { color: rgb(68, 85, 136); font-weight: bold; }

.hljs-tag, .hljs-tag .hljs-title, .hljs-rules .hljs-property, .django .hljs=
-tag .hljs-keyword { color: rgb(0, 0, 128); font-weight: normal; }

.hljs-attribute, .hljs-variable, .lisp .hljs-body { color: rgb(0, 128, 128)=
; }

.hljs-regexp { color: rgb(0, 153, 38); }

.hljs-symbol, .ruby .hljs-symbol .hljs-string, .lisp .hljs-keyword, .clojur=
e .hljs-keyword, .scheme .hljs-keyword, .tex .hljs-special, .hljs-prompt { =
color: rgb(153, 0, 115); }

.hljs-built_in { color: rgb(0, 134, 179); }

.hljs-preprocessor, .hljs-pragma, .hljs-pi, .hljs-doctype, .hljs-shebang, .=
hljs-cdata { color: rgb(153, 153, 153); font-weight: bold; }

.hljs-deletion { background: rgb(255, 221, 221); }

.hljs-addition { background: rgb(221, 255, 221); }

.diff .hljs-change { background: rgb(0, 134, 179); }

.hljs-chunk { color: rgb(170, 170, 170); }
------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: http://mongoosejs.com/docs/css/mongoose5.css

@charset "utf-8";

html { font-family: "Open Sans"; }

body { margin: 0px; }

img { width: 100%; }

a { text-decoration: none; color: rgb(9, 113, 178); }

h2 a { color: rgb(0, 0, 0); }

h2:hover::before { position: absolute; left: 22px; margin-top: 4px; backgro=
und-image: url("/docs/images/link_64x64.png"); background-size: contain; he=
ight: 1em; width: 1em; content: " "; }

h3 a { color: rgb(0, 0, 0); }

h3:hover::before { position: absolute; left: 22px; margin-top: 4px; backgro=
und-image: url("/docs/images/link_64x64.png"); background-size: contain; he=
ight: 1em; width: 1em; content: " "; }

code { background-color: rgb(238, 238, 238); padding: 2px 4px; font-size: 0=
.9em; color: rgb(136, 0, 0); border-radius: 4px; }

pre code { background-color: transparent; padding: 0px; font-size: 1em; col=
or: rgb(34, 34, 34); }

#logo { width: 62px; height: 30px; position: relative; top: 5px; }

.logo-text { color: rgb(136, 0, 0); font-size: 20pt; position: relative; to=
p: 0px; left: 10px; text-transform: none; }

.pure-menu-item { height: 28px; font-size: 12pt; padding-top: 0px; }

.pure-menu-link { padding-top: 2px; }

li.sub-item { height: 23px; font-size: 11pt; margin-left: 20px; }

li.version { border-bottom: 1px solid rgb(221, 221, 221); padding-bottom: 4=
px; }

li.version ul.pure-menu-children { border: 1px solid rgb(221, 221, 221); }

#logo-container { position: relative; top: -4px; padding-bottom: 6px; borde=
r-bottom: 1px solid rgb(221, 221, 221); }

#menu { z-index: 1; position: fixed; top: 0px; left: 0px; height: 100%; bac=
kground-color: rgb(238, 238, 238); width: 250px; border-right: 1px solid rg=
b(221, 221, 221); overflow-y: auto; }

.container { position: relative; left: 250px; padding-left: 50px; width: 85=
0px; margin-bottom: 250px; }

pre { display: block; padding: 9.5px; margin: 10px 0px; font-size: 13px; li=
ne-height: 1.42857; color: rgb(51, 51, 51); word-break: break-all; word-wra=
p: break-word; background-color: rgb(245, 245, 245); border: 1px solid rgb(=
204, 204, 204); border-radius: 4px; font-family: Menlo, Monaco, Consolas, "=
Courier New", monospace; }

#mobile-menu { display: none; }

@media (max-width: 1160px) {
  .container { width: 100%; padding: 0px; left: 0px; margin: auto; }
  #content { margin: 10px; }
  #menu { display: none; position: absolute; top: 45px; border-top: 1px sol=
id rgb(221, 221, 221); border-right: 1px solid rgb(221, 221, 221); border-b=
ottom: 1px solid rgb(221, 221, 221); left: 0px; }
  pre { margin: 10px 0px 0px; }
  #mobile-menu { display: block; height: 45px; background-color: rgb(238, 2=
38, 238); border-bottom: 1px solid rgb(221, 221, 221); }
  #logo { border: 0px; }
  #mobile-logo-container { padding: 3px 0px; border: 0px; width: 215px; mar=
gin-left: auto; margin-right: auto; }
  #logo-container { display: none; }
  .menu-link { position: absolute; display: block; top: 0px; left: 0px; bac=
kground-color: rgb(238, 238, 238); font-size: 10px; z-index: 10; width: 2em=
; height: 3px; padding: 2.1em 1.6em; }
  .menu-link:hover, .menu-link:focus { background: rgb(221, 221, 221); }
  .menu-link span { position: relative; display: block; }
  .menu-link span, .menu-link span::before, .menu-link span::after { backgr=
ound-color: rgb(51, 51, 51); width: 100%; height: 0.2em; }
  .menu-link span::before, .menu-link span::after { position: absolute; mar=
gin-top: -0.6em; content: " "; }
  .menu-link span::after { margin-top: 0.6em; }
  .active { display: block !important; }
}

.pure-menu-item:last-of-type { padding-bottom: 200px; }

#carbonads { position: fixed; bottom: 0px; display: block; overflow: hidden=
; padding: 20px 10px; max-width: 230px; background: repeating-linear-gradie=
nt(-45deg, transparent, transparent 5px, rgba(0, 0, 0, 0.024) 5px, rgba(0, =
0, 0, 0.024) 10px) rgb(238, 238, 238); text-align: center; font-size: 14px;=
 line-height: 1.5; }

#carbonads a:hover { color: inherit; }

#carbonads span { display: block; overflow: hidden; }

.carbon-img { display: block; margin: 0px auto 8px; line-height: 1; }

.carbon-text { display: block; margin-bottom: 8px; }

.carbon-poweredby { display: block; text-transform: uppercase; letter-spaci=
ng: 1px; font-size: 10px; line-height: 1; }
------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://mongoosejs.com/docs/images/mongoose5_62x30_transparent.png

iVBORw0KGgoAAAANSUhEUgAAAD4AAAAeCAYAAAB0ba1yAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gEKExcne2z1KQAABEVJREFUWEft12uIFWUYB/Dfemk3
tc1SiiS7kFFZGpbRBUwqhD50I5IoIiIrouhrTReCSmQiCKMLhBBURhEUaQYlGgRdhMDMyhbMohtb
WVFauq176cMzc5ydnXP26gnCPwyz887zntn//7m+HMRBHMT/GS1DGYwH0uyelJ6La83GASeeakwu
ZTLaxR32YU/C3jr2GLtg40q8EcmUG3EVJuAnbMUmnI2bcCh6ZMSxG7/hB+xAB7Yl8a74u6MSYVyJ
50g5FbOEJ3sFgcdwQcGsO7v+EgKcheMMRq8QY58Q5me8i3ewPqGrYs+QGBHxsrppeGkazsPVuASz
K7a+hqNxJFZjGY5Fa8GmT0TDSNGB17Pra+wtilEvIoZFvKI4nSS8dyUuM5BAFdaKb81JmAtpCHU7
ljTaiH78ip1CvBkNbDuxUUTEVnyRi1DmMCTxomIpZ+AOXIxT6m4ajC1Yj7txXcIrkDIRj+MGEQ1V
6McfWINnBPk5WICFMiEr0IltIiVeTKKu1Pg0JJ4bpZGrK4WX2ofaVwc342EcgnMSvsu8Phf3Ykqj
zRmew9P4Soh2lHDASpxYZ08PduFtLMsjYBCBkofbRDivwmFl2xGiA4/gJXyIK4SIW7L7gcaPQoB9
WDCgmJRIn4s3RFiOlTRR6S/FclEfXhUF7qNGm8YRvTgNx2DyxHy1RPpBPIl5g7aPDWcK1dfgeiwW
ffmEBnvGC3mKPpGwvoUBuTxVFKHzjS6Ph4sOvIw7RZ42C12YmtBXI5dGlVwnqmuXCI1dwiPtQpRJ
YrRsUy1MT8XapIq1vGevFmm0GNMr7Oohn/AmiOFopiia9Wy7RVVfmrA5lf3zWV++B9vxMXYkfF/c
ncZH5mA+LsRFor3l6MMKA0fKHtyKkwtrn+IF0ftbhcCtwvtDkd8pxtc+MdJOFS2trWCzW7Sy/NqC
DxLep9DOssY+TRwM+pRQzP3S+mwxez+EIwTJ6Ql/l+yWiPTJMT/hs5LNPNFuZqmPDcIZ84SQh2fr
v2CzEPRzMdt3ojOJiK2hyGXEeVwqgi1ivl4nvD8zidAr2k8RneFyrEq4TQlpHFTWqk98F54Vs8AM
vCe+uQHfiLDvTipSrZ7jqvKvIUo/0p/wbcpSMStX2e9JY+JahAeqbIaBdpwuUuH+JFIK9YnlqPdu
NIeCGrJOIIkqfZeKI2OGTcLjv1e8Gy4WiXowoMU2It0II/Z4FTLyG8vrmTBtSczateKC1oR/yvYF
bBWh/KWoGT32H0+7G+wbNsZMPPd6AzyFWwohuRyPGky8RRxIrsWb6KnKWfZ/b7TebgpSOlOuyf5e
nNKVlgRPWZhGrViQPR9wjNnjw0Ab7ksjbJ8XoVvuJn+Ks/knQxWr8UIziPeJGf0t0fpqBY5afdgu
rqZhTFV9BJiA4w3j/N8sNMPjvcLrfYXn/vxlMaybEeI5mkF8hZjecrJ7BPn/FP8CFMQfknFKffkA
AAAASUVORK5CYII=

------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://cdn4.buysellads.net/uu/1/3386/1525189887-61450.png

iVBORw0KGgoAAAANSUhEUgAAAQQAAADICAYAAAAOVZ9xAAAABGdBTUEAALGPC/xhBQAAACBjSFJN
AAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAA
CXBIWXMAAAsSAAALEgHS3X78AAAKDklEQVR42u3dQWhb9wHH8V+KZNmdn4ha2eAnGrAOkWlpPGqr
LSQbq9fDepjtHprCmpaxjuEwBtshvSWw9pYeOtgh2VYfxpJDskPrXHKqs4F3cOTA3NHUykEFM8kH
2SjohdlxzbKD0b9Z4jR+8tP7P8nfzykIWf6/g79576//+z8JAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAADrcAdsDaIV7r59Zk7f+lO1xoIM5T64d+OS3advDCNoTtgcAIDoIAgCD
IAAwCAIAgyAAMGK2B9AaB+7t9OrtzMF/fb5evWt7dGgfR3r6EgfLt5+3PY6wdGgQ7u34derSE/9Z
+9XlP/7A9ujQPv7w01///WXbgwgRlwwADIIAwCAIAAyCAMAgCAAMggDAIAgADIIAwCAIAAyCAMAg
CAAMggDAIAgADIIAwCAIAAyCAMAgCAAMggDAIAgADIIAwCAIAAyCAMAgCAAMggDA6NAHtewPbndS
bo/z0OsLtbLtoaFNEYQ2kHPSGj2Y0WjKVT6VkRNP7OrnKut1VTY8LXlVLdQqWqiV5W1t2j4cRBhB
iCi3O6lxN6eJgSG5PcnmPqMnKbcnqdFURicOfVeSVPRWdWH5n7pW/Yo44CEEIWLc7qSmsnlNuEMt
+fyck9YHz70q7+u7Oj5/WZWNuu1DRoQwqRghbz0zrKvH3m5ZDO7nxBOacHO2DxkRwxlCBDixLp06
/L1QQmBDY/LT7e5V8c6ait6q7SHhEQiCZU6sS9MjryvnpG0PZU9yTlpOLKHRlCsn1qUhp09OLPHQ
cZ0vXScIEUYQLOuEGJw4NKxTh4/t6r1MZEYbcwgWvf/sD9s+BpKU6939MXB2EG0EwZKJgaGOmTPY
aXEU2hNBsGQqm7c9hMC43QShUzCHYMGJQ8NNLzYqeqsqeqtaqJVV2fAkSYVaWflUxrxnezLvaeWc
tIZ60xpo8nftVrPHgughCBZMDfo/O1iolXW+VFDhEfcpPPj6bLVk/u12JzXWP6jxgaGOmLNA6xCE
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

------MultipartBoundary--KbaGkv0ExTspDoJHw81aeFWswkgeMHXQnOzSX9mi1F------
